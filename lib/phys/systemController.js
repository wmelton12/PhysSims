// Generated by CoffeeScript 1.6.3
(function() {
  var SystemController;

  SystemController = (function() {
    function SystemController(svg) {
      this.svg = svg;
      this.movers = [];
      this.forces = [];
      this.svg.append('rect').attr('width', '100%').attr('height', '100%').attr('fill', 'none').attr('stroke', 'black');
      this.obs = null;
    }

    SystemController.prototype.addForce = function(v) {
      this.forces[this.forces.length] = v;
      return this.forces.length - 1;
    };

    SystemController.prototype.resetForces = function() {
      return this.forces = [];
    };

    SystemController.prototype.addMover = function(x, y, g1, g2) {
      this.movers[this.movers.length] = new Mover(this.svg, x, y, g1, g2);
      this.movers[this.movers.length - 1].display();
      return this.movers.length - 1;
    };

    SystemController.prototype.update = function() {
      var i, _results;
      i = 0;
      _results = [];
      while (i < this.movers.length) {
        this.updateSingle(i);
        _results.push(i++);
      }
      return _results;
    };

    SystemController.prototype.changeForce = function(i, v) {
      return this.forces[i] = v;
    };

    SystemController.prototype.addObstacle = function() {
      var range, x1, x2, y;
      y = Math.floor(Math.random() * this.svg.attr('height'));
      x1 = Math.floor(Math.random() * this.svg.attr('width'));
      range = this.svg.attr('width') - x1;
      x2 = Math.floor(Math.random() * range) + x1;
      y = 350;
      x1 = 0;
      x2 = 500;
      return this.obs = this.svg.append('line').attr('x1', x1).attr('y1', y).attr('x2', x2).attr('y2', y).attr('stroke', 'black');
    };

    SystemController.prototype.updateSingle = function(i) {
      var j;
      this.movers[i].resetForce();
      j = 0;
      while (j < this.forces.length) {
        this.movers[i].applyForce(this.forces[j]);
        j++;
      }
      this.movers[i].update();
      this.movers[i].checkEdges(this.svg.attr('width'), this.svg.attr('height'));
      this.movers[i].display();
      return this.movers[i].setObstacle(this.obs);
    };

    return SystemController;

  })();

  this.SystemController = SystemController;

}).call(this);

// Generated by CoffeeScript 1.6.3
(function() {
  var Mover;

  Mover = (function() {
    function Mover(svg, x, y, g, g2) {
      this.svg = svg;
      this.x = x;
      this.y = y;
      this.g = g;
      this.g2 = g2;
      this.circ = this.svg.append('circle').attr('cx', this.x).attr('cy', this.y).attr('r', 20).attr("fill", "red");
      this.coll = new Collider();
      this.obstacle = null;
      this.points = [];
      this.force = new Vector(0.0, 0.0);
      this.vel = new Vector(0.0, 0.0);
      this.aboveObs = false;
      this.its = 0;
    }

    Mover.prototype.display = function() {
      this.points.push(this.svg.append('circle').attr('r', 1).attr('cx', this.x).attr('cy', this.y).attr('fill', 'orange'));
      this.circ.attr("cx", this.x).attr("cy", this.y);
      if (this.points.length > 300) {
        this.points[0].remove();
        return this.points.shift();
      }
    };

    Mover.prototype.setObstacle = function(l) {
      return this.obstacle = l;
    };

    Mover.prototype.applyForce = function(v) {
      return this.force = this.force.add(new Vector(v.x, v.y * -1));
    };

    Mover.prototype.resetForce = function() {
      return this.force = new Vector(0.0, 0.0);
    };

    Mover.prototype.update = function() {
      var nv;
      if (this.obstacle !== null) {
        if (this.its % 100 === 0) {
          this.aboveObs = this.y < parseInt(this.obstacle.attr('y1'));
        }
      }
      this.vel = this.vel.add(this.force);
      this.x += this.vel.x;
      this.y += this.vel.y;
      nv = this.vel.mult(20);
      nv = new Vector(nv.x, nv.y * -1);
      if (this.g !== null) {
        this.g.drawSingleBar(nv.mag());
      }
      if (this.g2 !== null) {
        this.g2.drawVector(nv);
      }
      return this.its++;
    };

    Mover.prototype.checkEdges = function(w, h) {
      var oy;
      if (this.x + 20 >= w) {
        this.x = w - 20;
        this.vel.x *= -1;
      } else if (this.x - 20 <= 0) {
        this.x = 20;
        this.vel.x *= -1;
      }
      if (this.y + 20 >= h) {
        this.vel.y *= -1;
        this.y = h - 20;
      } else if (this.y - 20 <= 0) {
        this.y = 20;
        this.vel.y *= -1;
      }
      if (this.obstacle !== null) {
        if (this.coll.circleAndHorizontalLine(this.circ, this.obstacle)) {
          this.vel.y *= -1;
          oy = parseInt(this.obstacle.attr('y1'));
          if (this.aboveObs) {
            return this.y = oy - 20;
          } else {
            return this.y = oy + 20;
          }
        }
      }
    };

    return Mover;

  })();

  this.Mover = Mover;

}).call(this);
